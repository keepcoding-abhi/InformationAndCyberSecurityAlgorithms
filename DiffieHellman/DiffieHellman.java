import java.util.Scanner;

class User {
	private int prime, primitiveRoot, privateKey, lastPos;
	private final int MAX_SIZE;

	public int getPublicKey() {
		/*int exponent[] = power(prime, primitiveRoot);
		if(exponent == null) {
			return -1;
		}
		System.out.println("Result = ");
		displayArr(exponent);
		return -1;*/
		int exponent[] = power(primitiveRoot, privateKey);
		return mod(exponent, prime);
		/*System.out.println("Result of exponentiation :");
		displayArr(exponent);
		System.out.println("mod " + prime + " = " + Y);
		exponent = power(Y, privateKeyOther);
		return mod(exponent, prime);*/
	}

	public int getSharedKey(int publicKeyOther) {
		int exponent[] = power(publicKeyOther, privateKey);
		return mod(exponent, prime);
	}

	public int mod(int numerator[], int denominator) {
		int dividend = 0, remainder = 0, i = lastPos - 1;
		int quotient = 0;
		int result;
		//System.out.println("i = " + i);
		while(true) {
			while(((result = dividend / denominator) == 0) && i > -1) {
				//System.out.println("Dividend = " + dividend);
				dividend *= 10;
				dividend += numerator[i--];
			}
			//System.out.println("Dividend = " + dividend);
			dividend = dividend - (result * denominator);
			//System.out.println("Dividend = " + dividend);
			if(i == -1) {
				return dividend;
			}
		}
	}

	public void displayArr(int arr[]) {
		for(int i = lastPos ; i > 0 ; i--) {
			System.out.print(arr[i] + " ");
		}
		System.out.println(arr[0]);
	}

	public int[] power(int base, int exponent) {
		int[] result = new int[MAX_SIZE];
		int temp = base;
		int i = 0;
		while(temp != 0) {
			if(i == MAX_SIZE) {
				System.out.println("Overflow occurred while finding power(" + base + ", " + exponent + ").");
				return null;
			}
			result[i++] = temp % 10;
			temp /= 10;
		}
		if(i < MAX_SIZE) {
			result[i] = -1;
			lastPos = i; 
		} 

		int n = exponent - 1;
		for(i = 0 ; i < n ; i++) {
			multiply(result, base);
			if(result == null) {
				return null;
			}
		}
		return result;
	}

	public void multiply(int[] result, int number) {
		int i = 0, carry = 0, product;
		while(i < MAX_SIZE && result[i] != -1) {
			product = result[i] * number;
			product += carry;
			carry = product / 10;
			result[i] = product % 10;
			i++;
		}
		
		while(i < MAX_SIZE && carry != 0) {
			result[i++] = carry % 10;
			carry /= 10;
		}
		
		if((i == MAX_SIZE) && carry != 0) {
			System.out.println("Overflow occured.\n");
			result = null;
			return;
		}
		lastPos = i;
		if(i < MAX_SIZE) {
			result[i] = -1;
		}
	}

	public User(int prime, int primitiveRoot, Scanner console) {
		this.prime = prime;
		this.primitiveRoot = primitiveRoot;
		this.privateKey = getPrivateKey(console);
		MAX_SIZE = 100;
	}

	private int getPrivateKey(Scanner console) {
		System.out.println("Enter private key:");
		return console.nextInt();
	}
}

public class DiffieHellman {
	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		boolean status;
		int privateKeyA, privateKeyB, prime, primitiveRoot;
		while(true) {
			System.out.println("Enter n:");
			prime = sc.nextInt();
			status = checkPrime(prime);
			if(status == false) {
				System.out.println(prime + " is not a prime number.");
			}
			else {
				break;
			}
		}
		while(true) {
			System.out.println("Enter g:");
			primitiveRoot = sc.nextInt();
			if(primitiveRoot > 1 && primitiveRoot < prime) {
				status = checkCoPrime(prime, primitiveRoot);
				if(status == false) {
					System.out.println("The numbers " + prime + " and " + primitiveRoot + " are not co-prime.");
				}
				else {
					break;
				}
			}
			else {
				System.out.println("The primitive root must be > 1 and < " + prime + ".");
			}
		}
		/*System.out.println("Enter private keys of two users :");
		privateKeyA = sc.nextInt();
		privateKeyB = sc.nextInt();*/
		User A = new User(prime, primitiveRoot, sc);
		User B = new User(prime, primitiveRoot, sc);
		int publicKeyA = A.getPublicKey();
		int publicKeyB = B.getPublicKey();
		System.out.println("Public key of A :" + publicKeyA);
		System.out.println("Public key of B :" + publicKeyB);
		int sharedKeyA = A.getSharedKey(publicKeyB);
		int sharedKeyB = B.getSharedKey(publicKeyA);
		System.out.println("Shared key generated by A :" + sharedKeyA);
		System.out.println("Shared key generated by B :" + sharedKeyB);
	}

	private static boolean checkPrime(int number) {
		for(int i = 2, n = (int)Math.sqrt(number) ; i <= n ; i++) {
			if((number % i) == 0) {
				return false;
			}  
		}
		return true;
	}

	private static boolean checkCoPrime(int a, int b) {
		if(a < b) {
			a = a + b;
			b = a - b;
			a = a - b;
		}
		int remainder;
		while(true) {
			remainder = a % b;
			if(remainder == 0) {
				break;
			}
			a = b;
			b = remainder;
		}
		if(b == 1) {
			return true;
		}
		return false;
	}
}
